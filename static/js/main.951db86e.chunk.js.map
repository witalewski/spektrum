{"version":3,"sources":["get-text-from-pdf.ts","parse-quiz-results.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["pdfJs","workerSrc","processDataUrl","dataUrl","resolve","reject","a","data","window","atob","split","loadingTask","promise","pdfDocument","pagesText","numPages","i","getPage","page","getTextContent","textContent","push","items","map","str","parseScore","line","match","length","el","parseInt","parseQuizResults","results","console","log","find","introPage","categoryPages","divergentScore","typicalScore","slice","parseIntroPage","App","pdfUpload","useRef","useState","login","setLogin","name","email","setData","picture","setPicture","className","style","width","appId","autoLoad","fields","scope","callback","response","url","accessToken","icon","src","type","ref","onChange","fileList","current","files","file","Promise","reader","FileReader","readAsDataURL","onload","result","onerror","getTextFromPdf","Array","from","then","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.951db86e.chunk.js","sourcesContent":["import * as pdfJs from \"pdfjs-dist\";\n\npdfJs.GlobalWorkerOptions.workerSrc =\n  \"//cdnjs.cloudflare.com/ajax/libs/pdf.js/2.5.207/pdf.worker.js\";\n\nconst processDataUrl = async (\n  dataUrl: string,\n  resolve: (result: string[][] | PromiseLike<string[][]>) => void,\n  reject: (reason?: any) => void\n) => {\n  const data = window.atob(dataUrl.split(\",\")[1]);\n  const loadingTask = pdfJs.getDocument({ data });\n  try {\n    const pdfDocument = await loadingTask.promise;\n    const pagesText: string[][] = [];\n    const { numPages } = pdfDocument;\n    for (let i = 1; i <= numPages; i++) {\n      const page = await pdfDocument.getPage(i);\n      const textContent = await page.getTextContent();\n      pagesText.push(textContent.items.map(({ str }) => str));\n    }\n    resolve(pagesText);\n  } catch (error: any) {\n    reject(error);\n  }\n};\n\nexport const getTextFromPdf = (file: File): Promise<string[][]> =>\n  new Promise((resolve, reject) => {\n    if (!file || file.type !== \"application/pdf\") {\n      reject();\n    }\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () =>\n      processDataUrl(reader.result as string, resolve, reject);\n    reader.onerror = reject;\n  });\n","const parseScore = (line: string): number => {\n  const match = line.match(/(\\d+) na (\\d+)/);\n  if (!match || match.length < 2) {\n    return 0;\n  }\n  const [, score, outOf] = match.map((el) => parseInt(el));\n  return score / outOf;\n};\n\nconst parseIntroPage = (introPage: string[]) => {\n  console.log({ introPage });\n  if (introPage.length < 3) {\n    return { divergentScore: 0, typicalScore: 0 };\n  }\n  const [divergentScore, typicalScore] = introPage.slice(1, 3).map(parseScore);\n  return { divergentScore, typicalScore };\n};\n\nexport const parseQuizResults = (results: string[][]) => {\n  console.log(\n    \"results\",\n    results,\n    results.length,\n    results.find((page) => page.length < 1 || page[0] !== \"Aspie Quiz\")\n  );\n  if (\n    !results ||\n    results.length < 1 ||\n    results.find((page) => page.length < 1 || page[0] !== \"Aspie Quiz\")\n  ) {\n    return null;\n  }\n  const [introPage, ...categoryPages] = results;\n  console.log({ introPage });\n  console.log({ categoryPages });\n  return parseIntroPage(introPage);\n};\n","import React, { useRef, useState } from \"react\";\nimport FacebookLogin from \"react-facebook-login\";\nimport \"./App.css\";\nimport { getTextFromPdf } from \"./get-text-from-pdf\";\nimport { parseQuizResults } from \"./parse-quiz-results\";\n\nfunction App() {\n  const pdfUpload: React.MutableRefObject<HTMLInputElement | null> = useRef(\n    null\n  );\n  const [login, setLogin] = useState(false);\n  const [data, setData] = useState({ name: \"\", email: \"\" });\n  const [picture, setPicture] = useState(\"\");\n\n  const responseFacebook = (response: any) => {\n    console.log(response);\n    setData(response);\n    setPicture(response?.picture?.data?.url);\n    if (response.accessToken) {\n      setLogin(true);\n    } else {\n      setLogin(false);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div style={{ width: \"600px\" }}>\n        <div>\n          {!login && (\n            <FacebookLogin\n              appId=\"2955360728083836\"\n              autoLoad={true}\n              fields=\"name,email,picture\"\n              scope=\"public_profile\"\n              callback={responseFacebook}\n              icon=\"fa-facebook\"\n            />\n          )}\n          {login && <img src={picture} />}\n        </div>\n        {login && (\n          <div>\n            <div>\n              <p>{data.name && data.name.length && data.name.split(/\\s/)[0]}</p>\n              <p>{data.email}</p>\n            </div>\n            <input\n              type=\"file\"\n              ref={pdfUpload}\n              onChange={() => {\n                const fileList = pdfUpload.current?.files;\n                if (fileList) {\n                  const file = Array.from(fileList)[0];\n                  getTextFromPdf(file)\n                    .then((results) => {\n                      console.log(results);\n                      console.log(results.length);\n                      console.log(parseQuizResults(results));\n                    })\n                    .catch(console.log);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}