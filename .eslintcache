[{"/Users/aw/workspace/personal/spektrum/src/index.tsx":"1","/Users/aw/workspace/personal/spektrum/src/reportWebVitals.ts":"2","/Users/aw/workspace/personal/spektrum/src/App.tsx":"3","/Users/aw/workspace/personal/spektrum/src/get-text-from-pdf.ts":"4","/Users/aw/workspace/personal/spektrum/src/parse-quiz-results.ts":"5"},{"size":500,"mtime":1607180094649,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1607180094650,"results":"8","hashOfConfig":"7"},{"size":2066,"mtime":1607258434797,"results":"9","hashOfConfig":"7"},{"size":1201,"mtime":1607257254310,"results":"10","hashOfConfig":"7"},{"size":1026,"mtime":1607257715549,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1szfbzc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/aw/workspace/personal/spektrum/src/index.tsx",[],["25","26"],"/Users/aw/workspace/personal/spektrum/src/reportWebVitals.ts",[],"/Users/aw/workspace/personal/spektrum/src/App.tsx",["27"],"import React, { useRef, useState } from \"react\";\nimport FacebookLogin from \"react-facebook-login\";\nimport \"./App.css\";\nimport { getTextFromPdf } from \"./get-text-from-pdf\";\nimport { parseQuizResults } from \"./parse-quiz-results\";\n\nfunction App() {\n  const pdfUpload: React.MutableRefObject<HTMLInputElement | null> = useRef(\n    null\n  );\n  const [login, setLogin] = useState(false);\n  const [data, setData] = useState({ name: \"\", email: \"\" });\n  const [picture, setPicture] = useState(\"\");\n\n  const responseFacebook = (response: any) => {\n    console.log(response);\n    setData(response);\n    setPicture(response?.picture?.data?.url);\n    if (response.accessToken) {\n      setLogin(true);\n    } else {\n      setLogin(false);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div style={{ width: \"600px\" }}>\n        <div>\n          {!login && (\n            <FacebookLogin\n              appId=\"2955360728083836\"\n              autoLoad={true}\n              fields=\"name,email,picture\"\n              scope=\"public_profile\"\n              callback={responseFacebook}\n              icon=\"fa-facebook\"\n            />\n          )}\n          {login && <img src={picture} />}\n        </div>\n        {login && (\n          <div>\n            <div>\n              <p>{data.name && data.name.length && data.name.split(/\\s/)[0]}</p>\n              <p>{data.email}</p>\n            </div>\n            <input\n              type=\"file\"\n              ref={pdfUpload}\n              onChange={() => {\n                const fileList = pdfUpload.current?.files;\n                if (fileList) {\n                  const file = Array.from(fileList)[0];\n                  getTextFromPdf(file)\n                    .then((results) => {\n                      console.log(results);\n                      console.log(results.length);\n                      console.log(parseQuizResults(results));\n                    })\n                    .catch(console.log);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/aw/workspace/personal/spektrum/src/get-text-from-pdf.ts",[],["28","29"],"/Users/aw/workspace/personal/spektrum/src/parse-quiz-results.ts",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":40,"column":21,"nodeType":"36","endLine":40,"endColumn":42},{"ruleId":"30","replacedBy":"37"},{"ruleId":"32","replacedBy":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["39"],["40"],"no-global-assign","no-unsafe-negation"]